% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fct_metamodel.R, R/predict_metamodel.R
\name{predict_metamodel}
\alias{predict_metamodel}
\title{Predict using a fitted metamodel}
\usage{
predict_metamodel(model = NULL, inputs = NULL, output_type = "vector")

predict_metamodel(model = NULL, inputs = NULL, output_type = "vector")
}
\arguments{
\item{model}{model object. Built using a function from the PACHECK package.}

\item{inputs}{dataframe or vector. When choosing a vector in the case of a three-variable model: the first, second, third, and fourth value represent the input for the first, second, third, and FIRST variable, respectively. Default gives the predictions based on the training data.}

\item{lm_metamodel}{a lm object. This object should use variables defined in `df`.}

\item{output}{character. Choose an output: 'dataframe' or 'vector'.}
}
\value{
A dataframe with the results of deterministic sensitivity analyses performed using parameter values of the linear metamodel. The dataframe contains the results using the lower and upper bound of the 95% Confidence Interval of the probabilistic parameters.

returns a vector or a dataframe containing the predictions.
}
\description{
This function computes a result using a pre-defined metamodel, and user-defined inputs to make the prediction.
}
\details{
The number of element of `inputs` should equal the number of predictors included in `lm_metamodel`.
}
\examples{
# Fitting meta modelwith two variables using the summary data
data(df_pa)
lm_res <- fit_lm_metamodel(df = df_pa,
                 y = "Inc_QALY",
                 x = c("p_pfsd", "p_pdd")
                 )

# Predicting using this metamodel
predict_metamodel(lm_metamodel = lm_res,
                     inputs = c(0.75, 0.2)
                     )
#Making 3 predictions for a two-variable metamodel, using a vector as input, and yielding a dataframe as output.
data(df_pa)
lm_fit = fit_lm_metamodel(df = df_pa,
                 y_var = "inc_qaly",
                 x_vars = c("p_pfsd", "p_pdd")
                 )

vec = c(0.1,0.2,0.08,0.15,0.06,0.25)

predict_metamodel(model = lm_fit,
                 inputs = vec,
                 output_type = "dataframe"
                 )
}
